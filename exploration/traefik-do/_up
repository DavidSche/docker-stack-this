#!/usr/bin/env bash

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Print a helpful message if a pipeline with non-zero exit code causes the
# script to exit as described above.
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset

###############################################################################
# Functions
###############################################################################

# Create Network ntw_front
if [ ! "$(docker network ls --filter name=ntw_front -q)" ]; then
  docker network create --driver overlay --subnet 10.11.10.0/24 --opt encrypted ntw_front
  sleep 2
fi

echo; echo "Show network..."
docker network ls | grep "ntw_"


# Vars
export CTN_traefik="tool_traefik_do"
export IMG_traefik="traefik:1.3.8-alpine"
export CTN_portainer="tool_portainer"
export IMG_portainer="portainer/portainer:1.14.0";
NTW_FRONT="ntw_front"

# Traefik
docker service create \
--name "$CTN_traefik" --hostname "$CTN_traefik" \
--network "$NTW_FRONT" --replicas 1 \
--reserve-memory 64M --limit-memory 128M \
--restart-condition any --restart-max-attempts 10 \
--publish 80:80 --publish 443:443 --publish 8080:8080 \
--update-delay 5s --update-parallelism 1 \
--constraint=node.role==manager \
--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
--mount type=bind,src=/root/docker-stack-this/traefik-do/traefik.toml,dst=/traefik.toml \
--mount type=bind,src=/mnt/DeployGRP/tooldata/traefik/acme.json,dst=/acme.json \
"$IMG_traefik" \
--docker \
--docker.swarmmode \
--docker.domain=traefik \
--docker.watch \
--web

  # Check services deployment in real time
  MIN=1
  MAX=4
  for ACTION in $(seq $MIN $MAX); do
    echo
    echo "docker service ls | Check $ACTION" of $MAX; echo;
    docker service ls && echo;
    docker service ps "$CTN_traefik" --no-trunc; echo; sleep 2;
  done
  echo; echo;


#webapps
docker stack deploy toolweb -c toolweb.yml
echo; echo ; sleep 2

echo; echo "docker stack ls ..."
docker stack ls;
echo; echo ; sleep 2


# Portainer
docker service create \
--name "$CTN_portainer" \
--network "$NTW_FRONT" --replicas 1 \
--reserve-memory "20M" --limit-memory "40M" \
--restart-condition "any" --restart-max-attempts "55" \
--update-delay "5s" --update-parallelism "1" \
--mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
--mount type=bind,src=$MNT_DEPLOY_GRP/tooldata/portainer/data,dst=/data \
--label traefik.frontend.rule="PathPrefixStrip:/portainer" \
--label traefik.backend="$CTN_portainer" \
--label traefik.port="9000" \
--label traefik.docker.network="$NTW_FRONT" \
--label traefik.frontend.entryPoints="http,https" \
"$IMG_portainer" \
-H unix:///var/run/docker.sock

  # Check services deployment in real time
  MIN=1
  MAX=4
  for ACTION in $(seq $MIN $MAX); do
    echo
    echo "docker service ls | Check $ACTION" of $MAX; echo;
    docker service ls && echo;
    docker service ps "$CTN_portainer" --no-trunc; echo; sleep 2;
  done
  echo; echo;


# Check traefik logs
echo "docker service logs -f proxy_traefik ..."
docker service logs -f "$CTN_traefik"
echo; echo ; sleep 2