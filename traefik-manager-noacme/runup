#!/usr/bin/env bash

###############################################################################
# Bash best practice
###############################################################################

# Exit on error. Append "|| true" if you expect an error.
set -o errexit
# Print a helpful message if a pipeline with non-zero exit code causes the
# script to exit as described above.
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset

# If needed, add permission to make this file executable | chmod +x start
# Warning: the file acme.json must have chmod 600 privilege


###############################################################################
# Functions
###############################################################################

# Stop
echo; echo "Remove stacks (due diligence)"
./rundown

# Create Network
echo; echo "If not existing, create our network ..."

if [ ! "$(docker network ls --filter name=ntw_front -q)" ];then
  docker network create --driver overlay --subnet 10.11.10.0/24 --opt encrypted ntw_front
  sleep 2
fi

echo; echo "Show network..."
docker network ls | grep "ntw_"

#Stack
echo; echo "Start the stacks ..."; echo; echo 
# traefik
docker stack deploy toolproxy -c toolproxy.yml
echo; echo ; sleep 2
# webapps
docker stack deploy toolweb -c toolweb.yml
echo; echo ; sleep 2

# List
echo; echo "docker stack ls ..."
docker stack ls;
echo; echo ; sleep 2

# Follow deployment in real time
MIN=1
MAX=3
for ACTION in $(seq $MIN $MAX); do
  echo
  echo "docker service ls | Check $ACTION" of $MAX; echo;
	docker service ls && echo && sleep 2;
done
echo; echo ; sleep 2

# See Traefik logs
echo "docker service logs -f proxy_traefik ..."
docker service logs -f toolproxy_traefik