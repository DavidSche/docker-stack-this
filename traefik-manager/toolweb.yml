version: "3.2"

services:

  home:
    image: emilevauge/whoami
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 8M
      labels:
        - "traefik.backend=home"
        - "traefik.frontend.rule=PathPrefixStrip:/"
        - "traefik.port=80"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=10"

  a-cad:
    image: abiosoft/caddy
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 8M
      labels:
        - "traefik.backend=a-cad"
        - "traefik.frontend.rule=PathPrefixStrip:/a-cad"
        - "traefik.port=2015"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=10"

  b-cad:
    image: abiosoft/caddy
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 8M
      labels:
        - "traefik.backend=b-cad"
        - "traefik.frontend.rule=PathPrefixStrip:/b-cad"
        - "traefik.port=2015"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=20"

  a-gix:
    image: nginx:alpine
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=a-gix"
        - "traefik.frontend.rule=PathPrefixStrip:/a-gix"
        - "traefik.port=80"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=10"

  b-gix:
    image: nginx:alpine
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]  
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=b-gix"
        - "traefik.frontend.rule=PathPrefixStrip:/b-gix"
        - "traefik.port=80"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=20"

  a-who:
    image: emilevauge/whoami
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=a-who"
        - "traefik.frontend.rule=PathPrefixStrip:/a-who"
        - "traefik.port=80"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=10"

  b-who:
    image: emilevauge/whoami
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=b-who"
        - "traefik.frontend.rule=PathPrefixStrip:/b-who"
        - "traefik.port=80"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=20"

  a-der:
    image: jwilder/whoami
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=a-der"
        - "traefik.frontend.rule=PathPrefix:/a-der"
        - "traefik.port=8000"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=10"

  b-der:
    image: jwilder/whoami
    networks:
      - ntw_front
    deploy:
      replicas: 2
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.10'
          memory: 7M
      labels:
        - "traefik.backend=b-der"
        - "traefik.frontend.rule=PathPrefix:/b-der"
        - "traefik.port=8000"
        - "traefik.docker.network=ntw_front"
        - "traefik.backend.loadbalancer.method=drr"
        - "traefik.backend.loadbalancer.swarm=true"
        - "traefik.weight=20"

networks:
  ntw_front:
    external: true

### ### ### ### ### ### ### ### ### ### ### ### ### ### 

#wrr: Weighted Round Robin
#drr: Dynamic Round Robin

# Example
# "traefik.frontend.passHostHeader=true"

# Testing
#1 "traefik.frontend.headers=SSLRedirect:true"
#2 "traefik.headers=SSLRedirect:true"
#3 "traefik.frontend.headers.SSLRedirect=true"
#4 "traefik.headers.SSLRedirect=true"

# Idea
# "traefik.frontend.headersSSLRedirect=true"
# "traefik.frontend.SSLRedirectheaders=true"

#Cheers!
#Pascal | https,http://twitter.com/askpascalandy

### ### ### ### ### ### ### ### ### ### ### ### ### ###